import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH, SCREEN_HEIGHT = 640, 480
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE
SNAKE_SPEED = 15

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

# Initialize the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Snake Game")

# Player name
player_name = ""

# Initialize the game state
def initialize_game():
    global snake, snake_direction, snake_grow, food, score, game_over
    snake = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
    snake_direction = (0, -1)
    snake_grow = False
    food = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
    score = 0
    game_over = False

initialize_game()

# High Scores
high_scores = []

# Load high scores from a file (if available)
def load_high_scores():
    try:
        with open("high_scores.txt", "r") as file:
            for line in file:
                name, score = line.strip().split(",")
                high_scores.append((name, int(score)))
            high_scores.sort(key=lambda x: x[1], reverse=True)
    except FileNotFoundError:
        pass

# Save high scores to a file
def save_high_scores():
    with open("high_scores.txt", "w") as file:
        for name, score in high_scores:
            file.write(f"{name},{score}\n")

load_high_scores()

# Main menu flag
main_menu = True

# Customizable settings
grid_size = 20
snake_speed = 15

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if main_menu:
            # Main Menu
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_s:
                    main_menu = False
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()
        else:
            if game_over:
                # Game Over Screen
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        initialize_game()
                        main_menu = False
                    elif event.key == pygame.K_q:
                        pygame.quit()
                        sys.exit()
            else:
                # Game Logic (same as before)

    if not main_menu:
        # Clear the screen
        screen.fill(BLACK)

        if not game_over:
            # Draw the snake
            for segment in snake:
                pygame.draw.rect(screen, GREEN, (segment[0] * GRID_SIZE, segment[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))

            # Draw the food
            pygame.draw.rect(screen, WHITE, (food[0] * GRID_SIZE, food[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))
        else:
            # Display game over message and player name input
            font = pygame.font.Font(None, 72)
            game_over_text = font.render("Game Over", True, WHITE)
            screen.blit(game_over_text, (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 3))

            font = pygame.font.Font(None, 36)
            score_text = font.render(f"Your Score: {score}", True, WHITE)
            screen.blit(score_text, (SCREEN_WIDTH // 3, SCREEN_HEIGHT // 2))

            input_text = font.render("Enter Your Name:", True, WHITE)
            screen.blit(input_text, (SCREEN_WIDTH // 4, 2 * SCREEN_HEIGHT // 3))

            input_name = font.render(player_name, True, WHITE)
            screen.blit(input_name, (SCREEN_WIDTH // 2, 2 * SCREEN_HEIGHT // 3))

        # Display the high scores
        high_score_text = font.render("High Scores", True, WHITE)
        screen.blit(high_score_text, (SCREEN_WIDTH - 150, 10))

        for i, (name, hs) in enumerate(high_scores[:10]):
            score_display = font.render(f"{i + 1}. {name}: {hs}", True, WHITE)
            screen.blit(score_display, (SCREEN_WIDTH - 150, 50 + 30 * i))

        # Update the display
        pygame.display.update()

    # Control game speed
    pygame.time.Clock().tick(SNAKE_SPEED)
